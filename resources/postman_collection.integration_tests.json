{
	"info": {
		"_postman_id": "fd10d567-45f6-4db2-899b-87e6bb8020ba",
		"name": "SPAMD-UL Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00305ec5-082d-4b00-980d-3837d28cc20e",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add parking sticker (granted for day)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0afbb9cf-4fd4-449b-8a93-ef0632b8017c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.parkingStickerCode\", jsonData.parkingStickerCode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c80f5b2a-5c62-4fa0-8a1b-af8924a34012",
								"exec": [
									"var d = new Date();",
									"var weekday = new Array(7);",
									"weekday[0] = \"\\\"sunday\\\"\";",
									"weekday[1] = \"\\\"monday\\\"\";",
									"weekday[2] = \"\\\"tuesday\\\"\";",
									"weekday[3] = \"\\\"wednesday\\\"\";",
									"weekday[4] = \"\\\"thursday\\\"\";",
									"weekday[5] = \"\\\"friday\\\"\";",
									"weekday[6] = \"\\\"saturday\\\"\";",
									"",
									"postman.setEnvironmentVariable(\"request.parkingSticker.validDay\", weekday[d.getDay()]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/parkings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"parkings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add parking sticker (refused for day)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0915719b-28ae-42b7-afe9-8790e5f54269",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.refusedParkingStickerCode\", jsonData.parkingStickerCode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ecc21eeb-1501-4f8d-b923-7f872f58b582",
								"exec": [
									"var d = new Date();",
									"var weekday = new Array(7);",
									"weekday[0] = \"\\\"sunday\\\"\";",
									"weekday[1] = \"\\\"monday\\\"\";",
									"weekday[2] = \"\\\"tuesday\\\"\";",
									"weekday[3] = \"\\\"wednesday\\\"\";",
									"weekday[4] = \"\\\"thursday\\\"\";",
									"weekday[5] = \"\\\"friday\\\"\";",
									"weekday[6] = \"\\\"saturday\\\"\";",
									"",
									"var invalidWeekday = d.getDay();",
									"if (invalidWeekday === 6) {",
									"    invalidWeekday = 0;",
									"}",
									"postman.setEnvironmentVariable(\"request.parkingSticker.validDay\", weekday[invalidWeekday]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/parkings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"parkings"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Add user",
					"item": [
						{
							"name": "Name",
							"item": [
								{
									"name": "Invalid name (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64b39506-70de-4ef0-9beb-746fa5a1fa41",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid name\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid name (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a46c5f72-8da6-4e2d-8ae2-22b79270d069",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid name\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid name (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d151fa13-7dba-4c0a-be56-84fddcab4717",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid name\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": 1,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid name (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49eaa043-b9fa-4ad6-ae2f-d7eaa15fb2d0",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid name\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": [{{request.user.name}}],\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid name (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f2b11af-3087-486e-976c-683a62ad93af",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid name\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {\n      \"name\": {{request.user.name}}\n  },\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Birth date",
							"item": [
								{
									"name": "Invalid birth date (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fee2dd7d-c588-4c01-a3a4-868fb25224d4",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bc34f5b-d4c3-4dc8-a252-d3a46fe6f9b4",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "214b5f7e-4304-442a-ba3f-c54d6ee8fde1",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": 1,\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5618718c-5b00-487d-b356-98b77204696e",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": [{{request.user.birthDate}}],\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f9de278-c855-48d5-8011-1c7f8f4fd875",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {\n      \"birthDate\": {{request.user.birthDate}}\n  },\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0197db7-2ab1-4b0a-8b8f-bbda73cf86a4",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid birth date (future)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dba02644-3d9a-4516-aabb-c28a00e0aafc",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid birth date\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sex",
							"item": [
								{
									"name": "Invalid sex (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49f32b42-cb15-4352-a73b-626d486024b6",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null,\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid sex (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "583ccab6-495f-4cc6-82b9-5c517266ff09",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid sex (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b30093d-f26c-431d-811d-a83dc47817e5",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": 1,\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid sex (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0af605a0-832d-4cc9-a7d8-bfd431b1729c",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": [{{request.user.sex}}],\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid sex (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f2bf78c-852d-415d-85c3-ed3be1adf809",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {\n      \"sex\": {{request.user.sex}}\n  },\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid sex (bad value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef078a16-5bec-43ec-88e0-19d8256e6dbb",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid sex\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\",\n  \"accessDay\": {{request.user.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Access day",
							"item": [
								{
									"name": "Invalid access day (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dc3f39a-2201-45ca-ab5a-3dcaddca0588",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47464888-b4d5-47fa-8750-66440a6a8572",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af023aff-e8aa-454c-8718-fcbdcde13c2e",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab8b5984-ef41-4eaa-a319-bfa2dfcc9754",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": [{{request.user.accessDay}}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83361d95-cc7d-4db9-a3d2-af105f16c32b",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {\n      \"accessDay\": {{request.user.accessDay}}\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day (bad value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8eb101b5-9e36-4f93-8258-30d559c883d0",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid access day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid access day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": \"funday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1df9c918-6269-40df-bd6a-7d8187a26115",
										"exec": [
											"pm.test(\"Returns status 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Returns account id\", function () {",
											"    pm.response.to.have.jsonBody(\"accountId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}},\n  \"accessDay\": {{request.user.accessDay}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get user",
					"item": [
						{
							"name": "Non existent account id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cedb0c05-dc8b-4916-97be-9757fbba07a8",
										"exec": [
											"pm.test(\"Returns status 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Returns account not found\", function () {",
											"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "524866b0-09ba-4e59-9489-70c65e165881",
										"exec": [
											"pm.test(\"Returns status 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns correct name\", function () {",
											"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
											"    pm.expect(name).to.contain(pm.response.json().name)",
											"});",
											"",
											"pm.test(\"Returns correct birth date\", function () {",
											"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
											"    pm.expect(birthDate).to.contain(pm.response.json().birthDate)",
											"});",
											"",
											"pm.test(\"Returns correct sex\", function () {",
											"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
											"    pm.expect(sex).to.contain(pm.response.json().sex)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b87bf0c2-4021-44f8-9dbf-0017acc971df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/{{param.accountId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{param.accountId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add parking sticker",
					"item": [
						{
							"name": "Account id",
							"item": [
								{
									"name": "Invalid account id (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12288648-59f5-4e11-98ac-93a322dc7d2a",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": null,\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cade347a-072a-48c4-b0f1-af2003ff2969",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "235cc8ac-bad2-42a8-8f73-98df3c2e6bfc",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": 1,\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "382ac285-437c-425a-8a4a-7b9b601b8c36",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": [\"{{param.accountId}}\"],\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8da03b82-38f1-4268-8033-70a9cf65bcdc",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": {\n      \"accountId\": \"{{param.accountId}}\"\n  },\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59f036ce-7622-468e-8032-f00ca90b478b",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"badFormat\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (non existent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab62a0a1-f381-4de4-9af8-e81768ec275d",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"dcbf4b65-c58e-40c4-b974-90c47bcd421a\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Parking area",
							"item": [
								{
									"name": "Invalid parking area (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2adcfabe-6ac4-46e3-b42d-47316f4d21aa",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": null,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79c409c5-757a-460c-97bd-ee383b1a3d3e",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54ec9825-ca11-492d-ab54-d2efab2c0709",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": 2,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dcc1f0d-38c7-48af-b76f-e91a86216269",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": [{{request.parkingSticker.parkingArea}}],\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37b39367-adf7-4f57-8959-95fc69aaa4d1",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {\n      \"parkingArea\": {{request.parkingSticker.parkingArea}}\n  },\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (non existent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e11e37ad-0c01-48c4-9bc6-23f00663d324",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns parking area not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": \"nonExistent\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reception method",
							"item": [
								{
									"name": "Invalid reception method (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "640e3e5f-cfa8-4362-88bb-b958e4846653",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": null,\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid reception method (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b16f3f8-9614-487d-8fa8-634eab3e542d",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid reception method (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c47d8faf-80fb-485b-be72-96fd36f327b6",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": 1,\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid reception method (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc3df545-c053-4d17-b86f-c0d7ac7c48db",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": [{{request.parkingSticker.receptionMethod}}],\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid reception method (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1615b1e-fec1-4263-95aa-07bc3cd44129",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {\n      \"receptionMethod\": {{request.parkingSticker.receptionMethod}}\n  },\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid reception method (bad value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7266aea7-4112-4631-969a-3fe1f6c171ca",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid reception method\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"homingPigeon\",\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Postal code (with postal reception method)",
							"item": [
								{
									"name": "Missing postal code (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "250be111-1640-4693-8b57-c31b8c8dba91",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns missing postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": null,\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing postal code (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4512ad75-fbea-40c5-8393-1bf611c9aee3",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns missing postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid postal code (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4113d8a-bbc2-4892-8927-5e4a0d74b716",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": 1,\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid postal code (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0df75c2f-947e-446e-bc98-19515479de55",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": [{{request.parkingSticker.postalCode}}],\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid postal code (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3490b18-7e10-4ab3-bce4-dd55f7c2c737",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {\n      \"postalCode\": {{request.parkingSticker.postalCode}}\n  },\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid postal code (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12a7f815-9136-4070-86a8-e4fd736f9748",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid postal code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": \"AAAAA\",\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d567d72-5256-4a74-9b58-d6fd77eebf55",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89e7b74a-7183-4863-a4d8-f1975a4241bb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Email (with email reception method)",
							"item": [
								{
									"name": "Missing email (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c11acc73-2752-4530-bb85-7ae87fca5822",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns missing email\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": null,\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing email (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be63e7f1-1e63-48c6-bfc4-41e15f56a5b9",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns missing email\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid email (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0e9e3f6-294a-4f1f-9393-e617b332bdb6",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid email address\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": 1,\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid email (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a10070f-f200-4206-88f7-d423e15c1b28",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid email address\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": [{{request.parkingSticker.email}}],\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid email (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7876d591-4b73-4804-834b-d34bf14478e7",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid email address\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {\n      \"email\": {{request.parkingSticker.email}}\n  },\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid email (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "580fb4d4-5e5b-4bde-803c-f3d8811a36ad",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid email address\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": \"invalidEmailFormat\",\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid day",
							"item": [
								{
									"name": "Invalid valid day (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b49852c2-435c-49a6-b222-793c75a4d330",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid valid day (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9465b2b-26ba-4d1c-a8dc-e2a061f161de",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid valid day (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aa7adca-3080-4f97-bcdd-3652a6cd8917",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid valid day (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "937f8143-e7ae-438f-a8d7-5d2686292836",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": [{{request.parkingSticker.validDay}}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid valid day (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fae03ad-3c1c-4f5a-8c29-3865fbaeb736",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {\n      \"validDay\": {{request.parkingSticker.validDay}}\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid valid day (bad value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c19a6fc-57c2-46ee-a487-72ac63145aaa",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": \"funday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkings",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid parking sticker (postal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "094412c6-f9fe-4f0c-8613-c1b6223609dc",
										"exec": [
											"pm.test(\"Returns status 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Returns parking sticker code\", function () {",
											"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/parkings",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"parkings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid parking sticker (email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33f27fc0-e077-4bfc-8491-3df41b86bb6c",
										"exec": [
											"pm.test(\"Returns status 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Returns parking sticker code\", function () {",
											"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {{request.parkingSticker.email}},\n  \"validDay\": {{request.parkingSticker.validDay}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/parkings",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"parkings"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate parking sticker",
					"item": [
						{
							"name": "Non existent parking sticker code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2916c687-5d60-442b-8d2a-0026fba2085d",
										"exec": [
											"pm.test(\"Returns status 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Returns parking sticker not found\", function () {",
											"    pm.expect(pm.response.json().error).to.equal(\"Parking sticker not found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/parkings/dcbf4b65-c58e-40c4-b974-90c47bcd421a/validate",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"parkings",
										"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid parking sticker code (granted for day)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f22b9d6-0b4a-42b5-a43c-868b45a48949",
										"exec": [
											"pm.test(\"Returns status 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Returns access status granted\", function () {",
											"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access granted\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/parkings/{{param.parkingStickerCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"parkings",
										"{{param.parkingStickerCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid parking sticker code (granted for day) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c440b3b8-fda3-44ea-bf9f-fee24d180cc9",
										"exec": [
											"pm.test(\"Returns status 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Returns access status granted\", function () {",
											"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access refused\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/parkings/{{param.refusedParkingStickerCode}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"parkings",
										"{{param.refusedParkingStickerCode}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add car",
					"item": [
						{
							"name": "Account id",
							"item": [
								{
									"name": "Invalid account id (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b15e3c60-aade-4e16-8631-390d1bebd4a7",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b608b599-9a8e-4250-a935-e0dd3636ad7d",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2285d20-29ec-46dd-baf9-09ac27d9b603",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": 1,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ac66f2a-afa8-443c-85a7-1cde410ccccb",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": [\"{{param.accountId}}\"],\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b58a218-d502-487e-a933-9250f0b9bb4b",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": {\n      \"accountId\": \"{{param.accountId}}\"\n  },\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80c14126-c93b-4081-b766-a58316b3d919",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid account id\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid account id\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid account id (non existent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2831f440-5629-4788-8bbd-89ae96bb4c5e",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"dcbf4b65-c58e-40c4-b974-90c47bcd421a\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Manufacturer",
							"item": [
								{
									"name": "Invalid manufacturer (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "114ec300-5c5d-4f3c-aa3b-8ae90405ff3c",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid manufacturer\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid manufacturer (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fdf01af-c68a-474c-97e6-e964e5ad0db7",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid manufacturer\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid manufacturer (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c3855ce-a4d0-4b14-b2ed-dece246d13cf",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid manufacturer\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": 1,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid manufacturer (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b82c46a6-0ec5-48d0-b625-36d162073a12",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid manufacturer\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": [{{request.car.manufacturer}}],\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid manufacturer (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bdf5b52-1278-48ec-85ab-4f3193cd6723",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid manufacturer\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {\n    \"manufacturer\": {{request.car.manufacturer}} \n  },\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Model",
							"item": [
								{
									"name": "Invalid model (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a64fc9f-e346-4ac0-8ac4-b36a0f38e859",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid model\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid model (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95dfd0bc-6ea4-4e7e-a0c6-60e2e07fed92",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid model\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid model (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "682d5597-dfb4-4654-98f8-73e7373e6d2f",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid model\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": 1,\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid model (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86896670-dcf6-4a18-a0d5-a67254a87e23",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid model\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": [{{request.car.model}}],\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid model (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91491f56-1617-4e91-be02-14bb8aada96f",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid model\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {\n    \"model\": {{request.car.model}}  \n  },\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Year",
							"item": [
								{
									"name": "Invalid year (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9badcc59-146e-4ce9-9a87-5ffe138abacd",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid year (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56370af0-bd1d-4539-b4f7-c423c8805b00",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid year (string)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5286aa80-46fa-4bb3-8367-1336f4cde275",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": \"2006\",\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid year (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91a991ec-7046-47b1-99ca-a995b71815ad",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": [{{request.car.year}}],\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid year (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13b7296d-1519-4c7b-a5ad-904a006d9db2",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {\n    \"year\": {{request.car.year}}  \n  },\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid year (future)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a238f145-fce4-4584-9b5f-03d5a0bf70c5",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid year\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "License plate",
							"item": [
								{
									"name": "Invalid license plate (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ae33f76-d8eb-41f5-a468-d635eda8888f",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid license plate (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "866cdfd6-c644-41e3-a486-5021bc8e76a7",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid license plate (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1f7256b-f2f0-4d97-9535-6d6c3e48410f",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid license plate (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92011fbf-dda0-48fe-ab34-dde2e3133418",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": [{{request.car.licensePlate}}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid license plate (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2162aa5e-fde6-44b2-82a9-6370b247fcbf",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {\n      \"licensePlate\": {{request.car.licensePlate}}\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid license plate (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4dd0da2-732f-4fa3-9998-f3ec005d8eb3",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid license plate\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": \"badFormat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid car",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "127d3db2-3002-4d8d-919b-5e986c9481c7",
										"exec": [
											"pm.test(\"Returns status 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": \"{{param.accountId}}\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/cars",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"cars"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get offense types",
					"item": [
						{
							"name": "Get offense types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9289c4ad-a9b1-4591-b3ba-a99f22303f28",
										"exec": [
											"pm.test(\"Returns status 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Returns offenses\", function () {",
											"    pm.expect(pm.response.json()).to.length.to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Returns offence with description\", function () {",
											"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Returns offence with code\", function () {",
											"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Returns offence with amount\", function () {",
											"    pm.expect(pm.response.json()[0].amount).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/offenses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"offenses"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42cc3631-db22-4e6a-a158-8f87ef6aefc3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b120211-f354-4f76-badf-c97518ff1019",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validation offense for parking sticker",
					"item": [
						{
							"name": "Parking sticker code",
							"item": [
								{
									"name": "Invalid parking sticker code (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b08a5057-123a-4184-ac0a-d9883002122d",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking sticker code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": null,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking sticker code (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5877db6-2e30-4bde-a697-f0359b567965",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking sticker code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking sticker code (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbf67666-7c8f-4b76-8239-1220b3141cce",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking sticker code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": 1,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking sticker code (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4210f6a-c473-4f6e-95af-9fe7cdf3171d",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking sticker code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": [\"{{param.parkingStickerCode}}\"],\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking sticker code (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06ad343b-a56f-45a4-9b5f-9c0a29b2ac83",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking sticker code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": {\n        \"parkingStickerCode\": \"{{param.parkingStickerCode}}\"\n    },\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking sticker code (non existent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "111f0023-f1e2-46e4-9f7b-262fbcf2efef",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns parking sticker not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Parking sticker not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"a1f5b0f6-91e5-4008-9e04-5f1081cfe914\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Parking area",
							"item": [
								{
									"name": "Invalid parking area (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74d2d04e-5820-4a75-920b-1dc703366354",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": null,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ed8a97b-4bcc-47c9-91a3-75413660c425",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b45eb7b-f8b6-4856-be1a-4fb04c67247c",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": 1,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4848b85e-4b31-4037-9a1f-8dae8d130ff0",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": [{{request.offenseValidation.parkingArea}}],\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f14ac67-f548-442d-9fc2-34e3f2373930",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid parking area code\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid parking area (non existent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b6cb806-98b8-4755-8bc3-de9efc98ea74",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns parking area not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Time of day",
							"item": [
								{
									"name": "Invalid time of day (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85402bb8-7218-4e22-b730-2c15ff8991ad",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid time of day (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ab5e57d-1ec6-40f7-9a17-3fbfd29a2e00",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid time of day (number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f024b07-85b3-42fc-af58-30828962142a",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid time of day (array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d280e9e-b50a-43a1-89ad-e436dc63b3a2",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": [{{request.offenseValidation.timeOfDay}}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid time of day (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2326b92b-32f2-4fc0-a671-dad633e42122",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {\n        \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid time of day (bad format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c968aa69-bfd2-44b7-8b3f-5327d3d51e88",
												"exec": [
													"pm.test(\"Returns status 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns invalid time of day\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": \"120000\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid offense validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95eaa5d8-4837-44e7-b51e-dccc71ee331a",
										"exec": [
											"pm.test(\"Returns status 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/offenses/validate",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"offenses",
										"validate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}