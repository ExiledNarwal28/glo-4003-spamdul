{
	"info": {
		"_postman_id": "2df0a9f0-f161-41f2-9f48-6cbb0cc04ca1",
		"name": "SPAMD-UL End-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8db9b6a1-7ed3-49c7-a92e-a6a3dbedef13",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "018eeb8e-1da5-420f-b956-86d785e2895b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add access pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96753869-c608-49ff-9899-9101f80b6cd2",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accessPassCode\", jsonData.accessPassCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"accessPasses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c01fb6d-4cb0-4e10-9dab-2c91ecf81ff5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.initiativeCode\", jsonData.initiativeCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/initiatives",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"initiatives"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Add user",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c908bf7-3ca2-41dd-bfdf-fab6a33f7e73",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc1d17e6-0795-4492-91bd-4a50424c3327",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Birth date",
									"item": [
										{
											"name": "Invalid birth date (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1938b4ce-fc41-4bac-a5cd-b2e42636cbfe",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8b07c71-5b7f-4d3a-8937-7469c2008387",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b5a9611-ee20-47a8-92e2-938e8bed230e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38a9a6af-b0a8-4656-81f4-382b0bdbac11",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Sex",
									"item": [
										{
											"name": "Invalid sex (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb782e23-9b4c-46f6-871d-36e7bb444775",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b8228f7f-6bb6-4200-b456-25ffd28c6a70",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30236292-9e3a-45a7-b057-e9e116703d32",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c16cfeb2-ba7e-44f0-9ed9-d0904da43a76",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns account id\", function () {",
													"    pm.response.to.have.jsonBody(\"accountId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee41b9d3-3fef-4678-a14a-e52d3baeac1e",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67328c96-32f6-484a-b86b-889e4ab18287",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct birth date\", function () {",
													"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
													"    pm.expect(birthDate).to.contain(pm.response.json().birthDate);",
													"});",
													"",
													"pm.test(\"Returns correct sex\", function () {",
													"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
													"    pm.expect(sex).to.contain(pm.response.json().sex);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b325e7be-f9d2-4e70-af4d-d7e97f682006",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user's bills",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "63451434-ae67-4588-babe-3c8c4339cf50",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bills",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "343c951c-1562-4cba-ab64-f2291f30e878",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bills"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user's cars",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f2081da8-24dd-4f8f-9e81-25910e059abf",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecc0efde-9afb-471f-9c62-20a1469f8ba6",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns cars\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns car with license plate\", function () {",
													"    var licensePlate = postman.getEnvironmentVariable(\"request.car.licensePlate\");",
													"    pm.expect(licensePlate).to.contain(pm.response.json()[0].licensePlate);",
													"});",
													"",
													"pm.test(\"Returns car with manufacturer\", function () {",
													"    var manufacturer = postman.getEnvironmentVariable(\"request.car.manufacturer\");",
													"    pm.expect(manufacturer).to.contain(pm.response.json()[0].manufacturer);",
													"});",
													"",
													"pm.test(\"Returns car with model\", function () {",
													"    var model = postman.getEnvironmentVariable(\"request.car.model\");",
													"    pm.expect(model).to.contain(pm.response.json()[0].model);",
													"});",
													"",
													"pm.test(\"Returns car with year\", function () {",
													"    var year = postman.getEnvironmentVariable(\"request.car.year\");",
													"    pm.expect(year).to.contain(pm.response.json()[0].year);",
													"});",
													"",
													"pm.test(\"Returns car with consumption type\", function () {",
													"    var consumptionType = postman.getEnvironmentVariable(\"request.car.consumptionType\");",
													"    pm.expect(consumptionType).to.contain(pm.response.json()[0].consumptionType);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add car to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd09cb64-d37e-40b6-87a0-700ee3f790e0",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Already existing license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "762f2b48-fc8d-412b-b9e8-eae8a0ea578c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns already existing license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Already existing license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9e34ae5d-24fa-4274-bc70-eabfcdc475c1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "072e0076-24f0-402a-ad07-8026cb0102c2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d95904c2-5ccc-4b34-b348-3d829eca19af",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Manufacturer",
									"item": [
										{
											"name": "Invalid manufacturer (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "63637b43-8002-47db-8436-0ad28ca07ef6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid manufacturer (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3843b7e5-2d9c-4dd5-a597-962e9b69d42e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Model",
									"item": [
										{
											"name": "Invalid model (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66fa4dc3-d806-427c-978e-2198dca5086a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid model (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "68147d80-9dd1-43f5-a6b2-262c44207346",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5996943e-9489-4b47-bb62-c9af4b1a9b52",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1eacaf82-6f34-4c62-bfa6-60f59a613019",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9d1d82b-2245-4802-b8e5-a7fd99b0698d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Consumption type",
									"item": [
										{
											"name": "Invalid consumption type (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b6ebb99-ca5c-4073-9c27-07d560e6af50",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "29ec1961-bc2c-48b9-9084-722f6230a8fc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "955a8e33-8b89-4ee4-8568-2ccc2bcc0787",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid car",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abaabe09-f5d4-4479-8efb-2c9f443b005f",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add access pass to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5d5c09bc-1fb0-4527-8125-8410204852ec",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Access day",
									"item": [
										{
											"name": "Invalid access day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f6a36ed-07b3-43a4-973c-0861cb268695",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": null,\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c4134da5-5aee-4344-a3c0-91fe574deea1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d3d1d132-7b5c-4559-abd4-1804c675cbe6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": \"funday\",\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7eab8896-82ad-4292-870c-9611077d4adf",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns license plate not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"License plate not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": \"AAA AAA\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid access pass",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "661c6990-c89f-4ffa-96cf-6b81fc665204",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add parking sticker to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df03493d-36b1-4e90-8fad-cbd6408ad2af",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa96abf8-afe6-4f25-8191-2c62c69b2b95",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": \"Zone_Unknown\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b95fa7bd-0f65-440a-bec8-3d8e985c4a00",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": null,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fb5adb7-a0dd-47e6-be7f-1f1c46c439e4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reception method",
									"item": [
										{
											"name": "Invalid reception method (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fe8bc40-6f1a-455f-b913-ea0da6da6750",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": null,\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "65982ebe-76b6-4730-b6e0-176212607488",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "516b5a94-1417-4e2f-a25e-80fc1ee73647",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"byFoot\",\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Postal code",
									"item": [
										{
											"name": "Missing postal code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fa9ca69-fa69-40dd-bfb3-cb57cddd3eab",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing postal code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db10327e-ab56-4e0e-aed6-f157401e4dc4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid postal code (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "207276da-99fd-4270-bd5e-d836355bc734",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": \"badFormat\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Email",
									"item": [
										{
											"name": "Missing email (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "58ef0e8a-6396-4744-9f4a-9ac279c74eb1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing email (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "479efed9-731c-45b6-acf1-25b83d4e94af",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid email (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "595aa274-d5b7-4928-9b6f-e7b6ff773797",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid email address\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": \"badFormat\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid parking sticker (postal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "698fa8ff-6aef-438f-83bc-9a5f56d284b7",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40e9355d-f859-493c-bd50-a26632fa5ad3",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {{request.parkingSticker.email}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Gate entry",
					"item": [
						{
							"name": "Validate gate entry for access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ed580cc-e790-4100-b432-96676e7b4cdb",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": {{request.accessPass.accessDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Day of week",
									"item": [
										{
											"name": "Invalid day of week (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24c6d9da-d45f-49b4-a117-0ddb2c6ed547",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid day of week (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ad6cb364-6ba9-4c97-a4e7-b0bdd41e0b8d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid day of week (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f4ee6f44-639d-43b6-a3d5-55918d6af4e9",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": \"funday\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid access day",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "603c19d3-6d04-4e24-9b7c-3dd235d08f8a",
												"exec": [
													"pm.test(\"Returns status 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Returns access status granted\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access granted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dayOfWeek\": {{request.accessPass.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gateEntry",
												"validateAccessPass",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6805759c-0a1b-421d-8197-806a3585caea",
												"exec": [
													"pm.test(\"Returns status 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Returns access status granted\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access refused\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dayOfWeek\": \"friday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gateEntry",
												"validateAccessPass",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offenses",
					"item": [
						{
							"name": "Get offense types",
							"item": [
								{
									"name": "Get offense types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61640c75-b136-414a-878b-50c3012ec0f5",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns offenses\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns offense with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with amount\", function () {",
													"    pm.expect(pm.response.json()[0].amount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/types",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validation offense for parking sticker",
							"item": [
								{
									"name": "Parking sticker code",
									"item": [
										{
											"name": "Invalid parking sticker code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2a10ba0-5a66-4c40-b924-9852ded165e6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": null,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking sticker code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5529f6c0-fd32-4ee5-bb98-889da9a65820",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99da81a1-798e-439c-a59d-0fc9bd2f23ec",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "315cd375-bf82-403f-8e3f-b9d4d3ece377",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": null,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e713571-7dc4-4ae3-a605-78dad05dcced",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Time of day",
									"item": [
										{
											"name": "Invalid time of day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eafd41dc-64fc-4015-aa8e-68c0e716dea2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "adf8e047-413f-408b-83fa-e82fcc6895c1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b54cbd02-7541-41ce-be16-dbc62068533e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": \"120000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid offense validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df568729-6c26-464c-a71f-c9693f11e341",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Initiatives",
					"item": [
						{
							"name": "Add initiative",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a272c214-0676-4991-9b44-ccf271f410a2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6930d4e-f318-406a-845c-8970d9e0adba",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Amount",
									"item": [
										{
											"name": "Invalid amount (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30bba69f-d104-444e-abba-18830632496f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative amount\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative amount\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1a8e1a87-8f5d-41bf-a173-bc547348c9e1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative amount\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative amount\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0e78ae3-22b3-4875-bcfd-734343627077",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative amount\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative amount\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ebc09832-2664-4a44-967b-bea89c218193",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative amount\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative amount\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": -200.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0924bd5f-3756-45f9-aa9c-f14835c04415",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns initiative code\", function () {",
													"    pm.response.to.have.jsonBody(\"initiativeCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee623cbc-49c3-41e3-8e97-b9fa02485c1f",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/users/nonExistent",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"nonExistent"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10c9aaee-ec3b-4560-8d8c-7e976825c5da",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct code\", function () {",
													"    var code = postman.getEnvironmentVariable(\"param.initiativeCode\");",
													"    pm.expect(code).to.contain(pm.response.json().code);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.initiative.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct amount\", function () {",
													"    var amount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(amount).to.contain(pm.response.json().allocatedAmount);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f74a6104-ff0b-4b17-a61f-9da3ce05b3af",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get initiatives",
							"item": [
								{
									"name": "Get initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93592bf3-2b0a-45b6-84d5-0bdc31ba409e",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns initiative\", function () {",
													"    pm.expect(pm.response.json()).to.length.to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns initiative with correct code\", function () {",
													"    var initiativeCode = postman.getEnvironmentVariable(\"param.initiativeCode\");",
													"    pm.expect(initiativeCode).to.contain(pm.response.json()[0].initiativeCode);",
													"});",
													"",
													"pm.test(\"Returns initiative with correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.initiative.name\");",
													"    pm.expect(name).to.contain(pm.response.json()[0].name);",
													"});",
													"",
													"pm.test(\"Returns initiative with correct amount\", function () {",
													"    var amount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(amount).to.contain(pm.response.json()[0].amount);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add amount to initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d6114318-c956-43a3-8a1c-c2216ee78992",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Amount to add",
									"item": [
										{
											"name": "Invalid amount to add (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24e70aff-b6ab-4100-aca1-e0e253adf596",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount to add\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount to add\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84469b20-5fa1-4608-95e1-1645db5507dc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount to add\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount to add\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b10bef3d-f00b-4235-acd6-dd8dee7cf741",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount to add\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount to add\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ff0ce29e-1ca3-4a81-9cf8-013a41e0caa6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": -20.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid amount to add",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d95492f7-d74c-434e-8480-a67e13f15e23",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get available amount for initiatives",
							"item": [
								{
									"name": "Get available amount for initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8ebe1f6-9047-4b81-9e79-a8731cdaf407",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns available amount\", function () {",
													"    pm.expect(pm.response.json().availableAmount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/availableAmount",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"availableAmount"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "118a8ec2-e162-41f8-8439-37621a59dbe1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec7e078a-a220-43f2-b3ca-af731dff1253",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Profits",
					"item": [
						{
							"name": "Get profits for parking stickers",
							"item": [
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40a7b431-807f-4dac-84e2-68715215dea9",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/parkingStickers?year=-2000",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"parkingStickers"
													],
													"query": [
														{
															"key": "year",
															"value": "-2000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "feffa7cb-aaad-4d19-951f-2b77db09ed84",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/parkingStickers?year=year",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"parkingStickers"
													],
													"query": [
														{
															"key": "year",
															"value": "year"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get profits for parking stickers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fe5ecda-de35-43c9-a96b-3baaa2396e63",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns profits\", function () {",
													"    pm.expect(pm.response.json().profits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/profits/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"profits",
												"parkingStickers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get profits for access passes",
							"item": [
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ba9d055-7053-46ec-a0d8-f7ce9357801e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/accessPasses?year=-2000",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "-2000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b8e7c168-bf62-4e34-868c-6abc34014960",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/accessPasses?year=year",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "year"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cd91309-93f2-47b7-9bcc-32d0aac4d47f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1f7405e3-e03c-481d-bd78-bbbf24e44dca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "By consumption type",
									"item": [
										{
											"name": "Invalid by consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0a2bb1c-bb34-4cde-8a41-608f1902538d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid by consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid by consumption type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/accessPasses?byConsumptionType=byConsumptionType",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "byConsumptionType",
															"value": "byConsumptionType"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c14ae28e-7c90-48bf-9d95-4e195398aae2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d53342f-4166-4f8f-b81a-a0ec4065fda9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get profits for access passes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "470e8b00-a8b8-4d71-bcaa-2a5d8ddd0d4a",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns profits\", function () {",
													"    pm.expect(pm.response.json().profits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/profits/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"profits",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get profits for access passes (by consumption type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94547408-6a50-4204-9c97-9fec20f2a2e3",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns profits by consumption type\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns profits for each consumption type\", function () {",
													"  for (i = 0; i < pm.response.json().length; i++) {",
													"    pm.expect(pm.response.json()[0].profits).to.not.be.null;",
													"  }",
													"});",
													"",
													"pm.test(\"Contains profits for gourmande\", function () {",
													"    pm.expect(pm.response.json()).to.contain(\"gourmande\");",
													"});",
													"",
													"pm.test(\"Contains profits for économique\", function () {",
													"    pm.expect(pm.response.json()).to.contain(\"économique\");",
													"});",
													"",
													"pm.test(\"Contains profits for hybride économique\", function () {",
													"    pm.expect(pm.response.json()).to.contain(\"hybride économique\");",
													"});",
													"",
													"pm.test(\"Contains profits for super économique\", function () {",
													"    pm.expect(pm.response.json()).to.contain(\"super économique\");",
													"});",
													"",
													"pm.test(\"Contains profits for 0 pollution\", function () {",
													"    pm.expect(pm.response.json()).to.contain(\"0 pollution\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/profits/accessPasses?byConsumptionType=true",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"profits",
												"accessPasses"
											],
											"query": [
												{
													"key": "byConsumptionType",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get profits for offenses",
							"item": [
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "740c0351-02a3-4883-8778-9c59eb43d111",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/offenses?year=-2000",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"offenses"
													],
													"query": [
														{
															"key": "year",
															"value": "-2000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d09cacac-e2ed-4682-bc18-b10e706e16c9",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/profits/offenses?year=year",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"profits",
														"offenses"
													],
													"query": [
														{
															"key": "year",
															"value": "year"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get profits for offenses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcd660c1-d454-46e0-94e6-517e36f65c73",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns profits\", function () {",
													"    pm.expect(pm.response.json().profits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/profits/offenses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"profits",
												"offenses"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Carbon credits",
					"item": [
						{
							"name": "Enable or disable monthly payment",
							"item": [
								{
									"name": "Monthly payment status",
									"item": [
										{
											"name": "Invalid monthly payment status (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7976b8a2-293c-4dfa-a045-5a6430986124",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8045815d-6b61-467c-ba5c-7b637be41e82",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "caa9e893-f4a4-4707-a0d1-3d9adc446c6b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Enable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4580060d-5c91-4e6a-9d80-e6b6c1e4b0f9",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"enable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f211047-c31d-4f18-84eb-70cdb05fdcfe",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"disable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65268a6b-d7cf-41d0-88b8-ad9a96cb2ce4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51e64121-68b6-4829-a861-a70a1c779a80",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get amount of purchased carbon credits",
							"item": [
								{
									"name": "Get amount of purchased carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f848110f-5be7-420d-bd70-390f73244d53",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns carbon credits\", function () {",
													"    pm.expect(pm.response.json().carbonCredits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e978ab8d-a16a-46e0-9ec7-0a674b986876",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98d63f3a-ee10-400c-bd65-e32e99d5a006",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}