{
	"info": {
		"_postman_id": "fc867034-d579-4a36-bf13-39e34b0d55d2",
		"name": "SPAMD-UL End-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a9c3762-331c-47ac-9876-8d84512915af",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43005929-a3bd-43b6-9e9f-368b455ed0a1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"cars"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Add user",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "451b0ac1-d931-4088-8c15-ba6a50bb1715",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5117f1ee-b985-4490-9dfe-6416577650c7",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Birth date",
									"item": [
										{
											"name": "Invalid birth date (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bde070dd-638d-49c0-ba52-8008c27df59e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9875d8c-75b0-4338-9d2d-66a11ea79b0a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48b832f0-0bbc-44e7-9a4d-e771d9f5139a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4800c7b0-f61c-4398-b4d2-65fb2e6a10c5",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Sex",
									"item": [
										{
											"name": "Invalid sex (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d37f97c3-1879-447d-bd86-60a8f36192e7",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bb4508f0-05ea-4dd4-a2b5-147e2533db38",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "629b1e97-effe-4be1-abc6-a0eb003ad68e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9398d5f-819a-4505-affe-997d9cef3731",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns account id\", function () {",
													"    pm.response.to.have.jsonBody(\"accountId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user",
							"item": [
								{
									"name": "Non existent account id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57b63369-9a09-4f40-bda9-eead59f9edb1",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc08734f-5cca-4e52-97fb-e1155e3b368e",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name)",
													"});",
													"",
													"pm.test(\"Returns correct birth date\", function () {",
													"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
													"    pm.expect(birthDate).to.contain(pm.response.json().birthDate)",
													"});",
													"",
													"pm.test(\"Returns correct sex\", function () {",
													"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
													"    pm.expect(sex).to.contain(pm.response.json().sex)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a54d827-0d3a-4cb3-8b40-2b28416ef818",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add car to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "087a4e2e-e573-4516-8e43-7540b87bf4be",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Invalid license plate (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8ca9a516-8b47-4841-aee4-930edf03a5a4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32bcad5d-578c-4d07-abe5-69addb7f6d7c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (already exists)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c158d9fc-2db5-4935-91b5-6df69644103f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns already existing license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Already existing license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92ab2e22-12c2-4755-ac2d-b5485beafd47",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Manufacturer",
									"item": [
										{
											"name": "Invalid manufacturer (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb9a8b6f-f561-4d19-84a6-5b3781958af4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid manufacturer (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59c5dd2c-7e6a-4ba8-86ec-49c317b016f5",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Model",
									"item": [
										{
											"name": "Invalid model (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "258e2439-a316-42af-9a64-cfa2715a5641",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid model (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "12c8ca01-852d-4010-a187-fed8d25b0ef9",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dda061f5-9bb6-4a87-bb1b-72c62b2f612c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a40ff21-8655-4516-8bea-2355331de4e3",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fbf3682-7ae7-43e8-ab50-7f19c08a0dd2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Consumption type",
									"item": [
										{
											"name": "Invalid consumption type (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72275dd9-afc3-4aab-aeca-9228f7a65e9a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "613ef110-255a-4b06-a59b-9bf902601888",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8d9bdf8-a41d-467f-a80e-a2b4b567bcf9",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid car",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1c4421c-fff7-44ab-bbbc-29e26454e94a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}