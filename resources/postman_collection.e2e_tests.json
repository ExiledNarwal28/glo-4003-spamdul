{
	"info": {
		"_postman_id": "547ef044-95cf-4992-907c-7282fc642bbd",
		"name": "SPAMD-UL End-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d32404d-653a-4076-9018-6cfb35820ea2",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b70fd19a-fefb-4fcb-8cec-554802734f8b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add access pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95f6b14d-3b85-4be3-820c-72ee1fea6e96",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accessPassCode\", jsonData.accessPassCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1 semester\",\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"accessPasses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's bills",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ab27ee8-c15d-49e5-93dc-fd920576ad54",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.length > 0) {",
									"  postman.setEnvironmentVariable(\"param.billId\", jsonData[0].billId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/bills",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"bills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pay user's bill",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "053319ba-dd9e-4c14-b623-bc03d8d52e07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"bills",
								"{{param.billId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f20eaa5-1208-403d-a3d9-6f3bb6ec9cc7",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.initiativeCode\", jsonData.initiativeCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/initiatives",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"initiatives"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Add user",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e92d192b-5903-45aa-90d8-1c91193c97ba",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "442e46b9-2134-421e-a17b-d8024f15d54a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Birth date",
									"item": [
										{
											"name": "Invalid birth date (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a29b97da-a6cb-41ac-8103-81d1ca77fa6f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "01324cd6-572b-4575-8b5c-d02b5b4ad8b1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f70e1224-31fa-4c91-8f88-9ee7a1fee219",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Future birth date",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fef9c9d1-a214-4ea9-a78b-cf3429f84626",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns future birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Future birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Sex",
									"item": [
										{
											"name": "Invalid sex (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0fb5842-2f3b-4aa1-b4fa-e1cd31bd9b0f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59602263-8acc-49bd-890a-f262dcb92e1f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c0a1798-45cc-4a5b-9983-69046ce34585",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7d245cf-fe2f-4bcb-897f-1bda05457e4c",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns account id\", function () {",
													"    pm.response.to.have.jsonBody(\"accountId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user",
							"item": [
								{
									"name": "Non existent account id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac12d6da-354b-4a02-a8f0-20fd3d2c4bd9",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2b59241-da68-4ffd-888f-fc446dc53b11",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct birth date\", function () {",
													"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
													"    pm.expect(birthDate).to.contain(pm.response.json().birthDate);",
													"});",
													"",
													"pm.test(\"Returns correct sex\", function () {",
													"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
													"    pm.expect(sex).to.contain(pm.response.json().sex);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e085d197-f323-4903-bfa1-8779dd822cd0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user's bills",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45ccdff2-c390-40d2-ab9f-587bea453174",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bills",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e9c5ed6-fbe8-4640-bfce-1142580ed89a",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns bills\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns bill with id\", function () {",
													"    pm.expect(pm.response.json()[0].billId).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with type\", function () {",
													"    pm.expect(pm.response.json()[0].billType).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount due\", function () {",
													"    pm.expect(pm.response.json()[0].amountDue).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount paid\", function () {",
													"    pm.expect(pm.response.json()[0].amountPaid).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with time\", function () {",
													"    pm.expect(pm.response.json()[0].time).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bills"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pay user's bill",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f21a67c-eff4-4445-9646-3764766a4690",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Bill id",
									"item": [
										{
											"name": "Non existent bill id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "415e7302-8ba0-42ae-a036-00fda50cf69c",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns bill not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Bill not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Amount to pay",
									"item": [
										{
											"name": "Invalid amount to pay (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55ccf18b-8f5f-41c3-8c99-d70063a70a2b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a6d18e33-1c69-4f41-829d-741263ddc492",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9366058a-3020-4c2d-b830-1a89518c30ae",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": \"amountToPay\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55736e71-2503-4c9b-b97a-66772f0df8e6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": -1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (exceeding)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2fa4ff7-8012-4c5f-99d8-82eba965fc92",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns amount due exceeded\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Amount due exceeded\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": 10000000000\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "476228aa-f9e5-42f8-8ebb-d139eb74f303",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns bill with id\", function () {",
													"    pm.expect(pm.response.json().billId).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with type\", function () {",
													"    pm.expect(pm.response.json().billType).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with description\", function () {",
													"    pm.expect(pm.response.json().description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount due\", function () {",
													"    pm.expect(pm.response.json().amountDue).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount paid\", function () {",
													"    pm.expect(pm.response.json().amountPaid).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with time\", function () {",
													"    pm.expect(pm.response.json().time).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bills",
												"{{param.billId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user's cars",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3898038a-3a25-4ecc-8b61-503caf3df82a",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eeef984-355d-49e4-a7ef-ecdf5a911ae9",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns cars\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns car with license plate\", function () {",
													"    var licensePlate = postman.getEnvironmentVariable(\"request.car.licensePlate\");",
													"    pm.expect(licensePlate).to.contain(pm.response.json()[0].licensePlate);",
													"});",
													"",
													"pm.test(\"Returns car with manufacturer\", function () {",
													"    var manufacturer = postman.getEnvironmentVariable(\"request.car.manufacturer\");",
													"    pm.expect(manufacturer).to.contain(pm.response.json()[0].manufacturer);",
													"});",
													"",
													"pm.test(\"Returns car with model\", function () {",
													"    var model = postman.getEnvironmentVariable(\"request.car.model\");",
													"    pm.expect(model).to.contain(pm.response.json()[0].model);",
													"});",
													"",
													"pm.test(\"Returns car with year\", function () {",
													"    var year = postman.getEnvironmentVariable(\"request.car.year\");",
													"    pm.expect(year).to.contain(pm.response.json()[0].year);",
													"});",
													"",
													"pm.test(\"Returns car with consumption type\", function () {",
													"    var consumptionType = postman.getEnvironmentVariable(\"request.car.consumptionType\");",
													"    pm.expect(consumptionType).to.contain(pm.response.json()[0].consumptionType);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add car to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f4202187-8ce1-4aee-92c0-20b3b22c9cc9",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Already existing license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7ffc21d-9717-4c47-88d5-2b3bfb2ca1d3",
														"exec": [
															"pm.test(\"Returns status 409\", function () {",
															"    pm.response.to.have.status(409);",
															"});",
															"",
															"pm.test(\"Returns already existing car\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Already existing car\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b88fab7c-da6e-4501-ba41-d30d1b2b8ff0",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a312efb-4e6e-436d-9ea7-56ef3d2b911d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0d9174b8-3d09-4063-9df0-0c0b161db844",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Manufacturer",
									"item": [
										{
											"name": "Invalid manufacturer (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f876655b-a3cc-4a3b-9b07-dd9f499e9028",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid manufacturer (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309d2bcb-3817-4284-80a4-4f29cb8d1f4a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Model",
									"item": [
										{
											"name": "Invalid model (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "85107bc5-9465-4105-9108-92a6566a0a5a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid model (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee500a61-ca97-4c09-a800-69de645eed5a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "349f9579-c847-4e42-ab97-9a639be64ccc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b4ea9853-0242-41fa-8ec9-29db6081285a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f593a5f2-cf15-4ae0-9ab1-bc09aa5c5e8f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Consumption type",
									"item": [
										{
											"name": "Invalid consumption type (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c56dc2ef-1a32-42b0-9254-511d207a162f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c9000fa9-0970-48ba-bc12-3d4b5bf5551b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "253ff565-74a0-4942-8ccc-48290063492c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid car",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cd84040-af43-48be-95f1-420a49b4c64a",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add access pass to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f7d8b4f-9793-4e07-8ae5-da36e2924376",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Period",
									"item": [
										{
											"name": "Invalid access period (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1ca947e7-af9a-428b-8b7b-ed493ed062b2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": null,\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access period (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "139846bb-fc15-40b4-97b1-c8cd83ce0325",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access period (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a32bdd7f-8cc0-4cff-9d13-0368d40ed3bc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"badValue\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unsupported access period (one hour)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a10b7189-ff4b-41fe-bdba-1ab83dddef34",
														"exec": [
															"pm.test(\"Returns status 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"pm.test(\"Returns unsupported access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Unsupported access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1h\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unsupported access period (one day)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aea66ef7-57a5-4e96-ab9f-4475637ad0d6",
														"exec": [
															"pm.test(\"Returns status 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"pm.test(\"Returns unsupported access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Unsupported access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Semesters",
									"item": [
										{
											"name": "Wrong amount of semesters (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3bce2866-664a-4a67-866b-08e056604e4d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d47c478-ccc3-4689-8612-a531a7690283",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid semester (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38cde6b8-11c4-48a6-bda7-b995d20dd03c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid semester code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid semester code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"badValue\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1d/week/semester vs 0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c17249c-c846-4c3e-985f-d592a3f2ab7e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1d/week/semester vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "438f9742-98d2-4d66-9416-1149339a03ad",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1 semester vs 0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4406f4fa-0cc0-4854-87e1-48bbd8f3901f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1 semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1 semester vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31865c2c-4be4-4e52-8a3c-3a18385b2120",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1 semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (2 semesters vs 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5807debc-018e-484d-b986-d9486c678e75",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"2 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (2 semesters vs 3)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c473b671-727b-4d2a-8039-0f70fde81af5",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"2 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\",\n      \"E21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (3 semesters vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "254185df-8eb2-49dc-87b9-f96e85226bfe",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"3 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Access day",
									"item": [
										{
											"name": "Invalid access day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "404e80f5-8491-42e8-9418-a1009d5324a8",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": null,\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "51982c23-92b2-4dcb-aaa3-923a4adb7826",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b04575d5-d26f-4306-a05c-70f545372f8b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": \"funday\",\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "076acec1-1236-4e58-937b-3b5f134cd962",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns car not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Car not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": \"AAA AAA\",\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "755d5c5d-db1e-40df-9ee1-07fdc1b099e2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"parkingArea\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "549d4fdf-c82f-41ef-810b-c9c6a9fd9b98",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4b9f30f9-32df-4482-a0b1-15e0afff30ea",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"parkingArea\": \"nonExistent\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid access pass (no license plate)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f827161-777a-4f48-bf67-2d7d4d22a892",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (1d/week/semester)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c1389-80b6-4c2f-b522-d21f072e0c3a",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (1 semester)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60ad5561-f430-4e94-81ec-7c9481ebe2f1",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1 semester\",\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (2 semesters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15514ff6-8b29-4750-a878-49c4ec2582b2",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"2 semesters\",\n  \"semesters\": {{request.accessPass.twoSemesters}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (3 semesters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f276bcf6-4e80-4dc1-8ca9-0bfa286723b4",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"3 semesters\",\n  \"semesters\": {{request.accessPass.threeSemesters}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add bicycle access pass to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3832c035-e042-469a-9c05-dc524c515061",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": \"ssp\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Semester",
									"item": [
										{
											"name": "Invalid semester (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "340820f6-3954-4133-86de-d8425371c933",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid semester code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid semester code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": null,\n  \"receptionMethod\": \"ssp\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid semester (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "879e875e-c655-4699-abbb-6cf7cbcd0dd2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid semester code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid semester code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"receptionMethod\": \"ssp\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid semester (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69265596-4a00-4142-8fdf-5a919d667d60",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid semester code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid semester code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": \"sessionSecrete\",\n  \"receptionMethod\": \"ssp\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reception method",
									"item": [
										{
											"name": "Invalid reception method (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5384a50-1335-4b09-989b-1482b9023324",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fdf5690-267d-414f-9053-425b405f6951",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92952224-e1b2-41d6-bc12-d6afe1710d76",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": \"byPigeon\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bicycleAccessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid bicycle access pass (postal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3456aae-1c08-4986-beb8-f37513c2ed39",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": \"postal\",\n  \"postalCode\": {{request.bicycleAccessPass.postalCode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bicycleAccessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid bicycle access pass (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a5080e9-2207-4a30-99e2-9db70c53b925",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": \"email\",\n  \"email\": {{request.bicycleAccessPass.email}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bicycleAccessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid bicycle access pass (ssp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e0743a9-9027-40b6-b7fa-978973898f15",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"semester\": {{request.bicycleAccessPass.semester}},\n  \"receptionMethod\": \"ssp\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bicycleAccessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bicycleAccessPasses"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add parking sticker to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0eb443d1-e04a-4bd9-aa43-97f42f7f267e",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b66c9754-f531-4269-86db-26859d4c65ff",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": \"Zone_Unknown\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "04c5a2b7-ead3-4de2-abd1-938949691179",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": null,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a500ebc0-6647-498b-9c50-03cc8d8aab9f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reception method",
									"item": [
										{
											"name": "Invalid reception method (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9def1711-df12-4fb0-8e6c-5a36ffc136b4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": null,\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "80e6dc55-1fb2-4512-a23f-dde37e4c364b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98af514d-d530-491c-a033-2770cbdc22fd",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"byFoot\",\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Postal code",
									"item": [
										{
											"name": "Missing postal code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0bb1a43c-4dcf-4cd1-a608-dbf53f6c3dcd",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": null,\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing postal code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a25ff20-bfe2-4a0b-9e1e-09b575147e56",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid postal code (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f33c74ce-66a6-42bb-8916-825af8965ee1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": \"badFormat\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Email",
									"item": [
										{
											"name": "Missing email (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4978abc2-975e-41e2-857d-203d85281a01",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": null,\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing email (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aee83f17-1a64-42d4-a18d-4ced5e0ad296",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid email (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ec74ff6-8275-4dcf-856b-110599143767",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid email address\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": \"badFormat\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking period",
									"item": [
										{
											"name": "Missing parking period (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fdbe21c-9f10-4d48-b767-19579fba6d13",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing parking period (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38e63141-5122-4232-8ef3-21aabfbdf4a6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing parking period (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3813568a-4dd9-4ad2-afe7-335e5f0da530",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid parking sticker (postal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4e8f2b7-908d-430a-9d8a-ab8309de678c",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c98bb8c-50bb-4d8a-a641-c96c5fa29d42",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {{request.parkingSticker.email}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (ssp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48f2079a-126a-4fd2-976d-0de89970f1fc",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"ssp\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Parking areas",
					"item": [
						{
							"name": "Get parking areas",
							"item": [
								{
									"name": "Get parking areas",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbb9e45f-39c1-41e4-bcb7-7a9363831d62",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns parking areas\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns parking area with parking area code\", function () {",
													"    pm.expect(pm.response.json()[0].parkingArea).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns parking area with period prices\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns parking area with period price with period\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice[0].period).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns parking area with period price with price\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice[0].price).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkingAreas",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkingAreas"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Gates",
					"item": [
						{
							"name": "Validate gate entry with access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "047b0c6b-b3a6-48bc-ada7-25058d27d476",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Date time",
									"item": [
										{
											"name": "Invalid date time (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fbafa90-6c6a-4e18-92f9-1aa93891ce31",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5cb872d-d8e2-4753-8101-9cc23159cd8f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1cf39b7a-bc52-47a8-8200-2d8ac141dd74",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": \"2020-01-01T23:33:33.33333\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid gate entry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9774fe90-b471-49e4-b58c-66e10b9357c6",
												"exec": [
													"pm.test(\"Returns status 202 or 403\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([202, 403]);});",
													"",
													"pm.test(\"Returns an access status\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gates",
												"entry",
												"validateAccessPassWithCode",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validate gate exit with access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0d13de7b-0a7e-4f5e-bec9-ab41667fe66b",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/exit/validateAccessPassWithCode/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"exit",
														"validateAccessPassWithCode",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validate gate entry with license plate",
							"item": [
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent access license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "780cab39-544c-455b-858b-ac95ff16db16",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/GPT OK1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"GPT OK1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Date time",
									"item": [
										{
											"name": "Invalid date time (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c27905d-7daf-4938-ad86-5342058e185f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e01ba158-5a52-418e-8269-414a6471c0b4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99012165-06ed-4661-a6f0-91d5edf3c6c2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": \"2020-01-01T23:33:33.33333\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "83348294-3dc2-4170-9ac8-6f90deb1bb19",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5bd09a95-8978-465e-b92d-b6a6eefee42a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid gate entry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8558ac04-fb0c-4342-ac06-b25e5b0f5737",
												"exec": [
													"pm.test(\"Returns status 202 or 403\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([202, 403]);});",
													"",
													"pm.test(\"Returns an access status\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gates",
												"entry",
												"validateAccessPassWithLicensePlate",
												"{{param.licensePlate}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validate gate exit with license plate",
							"item": [
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent access license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6907d186-2967-4220-9e8d-a6bf2c65aea0",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/GPT OK1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"GPT OK1"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offenses",
					"item": [
						{
							"name": "Get offense types",
							"item": [
								{
									"name": "Get offense types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa7fa2bd-30c7-4e58-b059-90a3eaabfed6",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns offenses\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns offense with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with amount\", function () {",
													"    pm.expect(pm.response.json()[0].amount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/types",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validation offense for parking sticker",
							"item": [
								{
									"name": "Parking sticker code",
									"item": [
										{
											"name": "Invalid parking sticker code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2fad7d9-77a5-41ab-aeb0-ac4cf64983e0",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": null,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking sticker code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b72f2ab-903a-4c1a-b397-27f06612db6c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d4b8fe0-7f94-4dca-935d-489eeb2a7f6f",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1df8e702-5292-470a-9279-15a6e9a58932",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": null,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ac89811-fe33-483a-9d6e-b6b87878c5ba",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Time of day",
									"item": [
										{
											"name": "Invalid time of day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dec1439d-a865-4dfb-a868-cfef6643b2b1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dcfd5506-d095-4f32-8670-c086c7be722c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e800475-5ec1-4e40-8744-dac8d1fecc46",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": \"120000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid offense validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01ae3611-c979-4a2f-9ba5-0a8419266a9c",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Initiatives",
					"item": [
						{
							"name": "Add initiative",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c912c57-9048-46ec-ad33-645318a25415",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2170ff18-b233-4e6f-bffa-6c32124d729b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Amount",
									"item": [
										{
											"name": "Invalid amount (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87c80275-b95d-49de-9808-986be87a92b4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "740c82a3-4b73-4df7-98c1-114975441ac8",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d224a0d0-5f98-41f6-a979-98f8a9ac875a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59c9513b-41a6-419c-8993-a42a8fa291ae",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": -200.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f880933-8220-41e7-ae73-01af16953529",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns initiative code\", function () {",
													"    pm.response.to.have.jsonBody(\"initiativeCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f2cc47bd-7f58-427e-b902-a264853ed839",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/initiatives/nonExistent",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"nonExistent"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9e676f5-4c18-49f6-9b22-debafc87801f",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct code\", function () {",
													"    var code = postman.getEnvironmentVariable(\"param.initiativeCode\");",
													"    pm.expect(code).to.contain(pm.response.json().code);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.initiative.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct amount\", function () {",
													"    var amount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(amount).to.contain(pm.response.json().allocatedAmount);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e1dc41b-5c7c-4a9d-b93c-6cd62aaaee86",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get initiatives",
							"item": [
								{
									"name": "Get initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffdb2a66-b259-48fa-b755-7719983edb7e",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns initiative\", function () {",
													"    pm.expect(pm.response.json()).to.length.to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns initiative with correct code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns initiative with correct name\", function () {",
													"    pm.expect(pm.response.json()[0].name).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns initiative with correct allocated amount\", function () {",
													"    var allocatedAmount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(allocatedAmount).to.contain(pm.response.json()[0].allocatedAmount);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add amount to initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "715f3723-ae3f-4c0f-85ad-c45fe7a62694",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Amount to add",
									"item": [
										{
											"name": "Invalid amount to add (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1918edd0-6d7b-43d9-8b56-6c10178be679",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "03554881-c2e9-47e3-8a1e-96f87af86739",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a565222a-bb2f-45da-8acd-cae480c44fac",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ac3ec154-e56d-4ef0-b712-d0f05b51b687",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": -20.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid amount to add",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6952cf77-6caf-48a6-8771-479c3a73075d",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get available amount for initiatives",
							"item": [
								{
									"name": "Get available amount for initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e2a29a8-70e3-48b7-8bff-5c27350e42f8",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns available amount\", function () {",
													"    pm.expect(pm.response.json().availableAmount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/availableAmount",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"availableAmount"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6abecaa-4048-423b-baa4-664fa1f31359",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "beabe944-a4f4-415d-a697-00deed7ad7a2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Carbon credits",
					"item": [
						{
							"name": "Enable or disable monthly payment",
							"item": [
								{
									"name": "Monthly payment status",
									"item": [
										{
											"name": "Invalid monthly payment status (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c16efd18-9985-42c0-96c7-35c7304b742b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc820b7e-e6a6-475e-972d-7676dcb9be18",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "234f3e88-2034-4434-a231-15f2a405485e",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Enable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbe238c4-1756-48ca-b116-701a66d6a095",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"enable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae62ec1c-1352-49ba-accd-bbd10491e781",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"disable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf6f5a6e-7294-47f0-b034-6f09a364a4af",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3215a096-113c-4bdd-8ea8-363ff4e34049",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get amount of purchased carbon credits",
							"item": [
								{
									"name": "Get amount of purchased carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16e79973-2ef8-4315-82e0-4b414e6f262f",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns carbon credits\", function () {",
													"    pm.expect(pm.response.json().carbonCredits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa1ec53a-4f9d-4909-98e3-97683c18a617",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75b1bd79-693b-48f9-b0d2-20e5a08bb995",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Profits",
							"item": [
								{
									"name": "Get profits report for parking stickers",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0f989eb6-46b8-4a76-961a-e6d08b309ecb",
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/parkingStickers?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"parkingStickers"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d692cafc-a765-4e4a-a1e1-28bc902f8e38",
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/parkingStickers?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"parkingStickers"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get profits report for access passes",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2d602603-9f19-4423-a77f-db046c30372c",
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/accessPasses?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"accessPasses"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b074615-4348-41d3-b302-5eb23fcfaa03",
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/accessPasses?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Valid profits report query by consumption type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0654035b-c840-4898-b3da-43b012c5efe4",
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns consumption type dimension\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"consumptionType\");",
															"});",
															"",
															"pm.test(\"Returns consumption type dimension with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/accessPasses?year={{queryParam.profits.year}}&byConsumptionType=true",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														},
														{
															"key": "byConsumptionType",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get profits report for offenses",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "49316adf-282f-437d-b981-c6c0e8871d7b",
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/offenses?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"offenses"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "02909caf-c141-4659-a77f-5a3a2c83a8ee",
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/offenses?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"offenses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Parking areas",
							"item": [
								{
									"name": "Report type",
									"item": [
										{
											"name": "Invalid report type (bad value) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ab05429-7a95-454c-b0a6-94963b190cf6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns invalid report type\", function () {\r",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid report type\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/parkingAreas?reportType=invalid",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"parkingAreas"
													],
													"query": [
														{
															"key": "reportType",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid parking areas monthly report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c64ba027-059c-47f8-90b5-d6d6c557d83e",
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array\", function () {\r",
													"    pm.expect(pm.response.json().length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period for current year\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data\", function () {\r",
													"    pm.expect(pm.response.json()[0].data).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns dimensions has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"parkingArea\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns metrics has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=monthly",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "monthly"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking areas day of month report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9db4614-d633-46f3-86e3-19749c6a06c3",
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array\", function () {\r",
													"    pm.expect(pm.response.json().length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period for given month\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data\", function () {\r",
													"    pm.expect(pm.response.json()[0].data).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns dimensions has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"parkingArea\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns metrics has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=dayOfMonth&month={{queryParam.reportMonth}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "dayOfMonth"
												},
												{
													"key": "month",
													"value": "{{queryParam.reportMonth}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking areas summary report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb99adb-50bb-4fe9-bcf0-dfef086286c2",
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array of 6 periods\", function () {\r",
													"    pm.expect(pm.response.json().length).to.equal(6);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns maximum periods\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.contain(\"maximum\");\r",
													"    pm.expect(pm.response.json()[1].period).to.contain(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns minimum periods\", function () {\r",
													"    pm.expect(pm.response.json()[2].period).to.contain(\"minimum\");\r",
													"    pm.expect(pm.response.json()[3].period).to.contain(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns average periods\", function () {\r",
													"    pm.expect(pm.response.json()[4].period).to.contain(\"average\");\r",
													"    pm.expect(pm.response.json()[5].period).to.contain(\"average\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with single data\", function () {\r",
													"    pm.response.json().forEach(period => pm.expect(period.data.length).to.equal(1));\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods without dimension\", function () {\r",
													"    pm.response.json().forEach(period => pm.expect(period.data[0].dimensions.length).to.equal(0));\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with one metric\", function () {\r",
													"     pm.response.json().forEach(period => pm.expect(period.data[0].metrics.length).to.equal(1));\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with gate entrics for cars metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntriesForCars\");\r",
													"    pm.expect(pm.response.json()[2].data[0].metrics[0].name).to.equal(\"gateEntriesForCars\");\r",
													"    pm.expect(pm.response.json()[4].data[0].metrics[0].name).to.equal(\"gateEntriesForCars\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with gate entrics for bicyles metric\", function () {\r",
													"    pm.expect(pm.response.json()[1].data[0].metrics[0].name).to.equal(\"gateEntriesForBicycles\");\r",
													"    pm.expect(pm.response.json()[3].data[0].metrics[0].name).to.equal(\"gateEntriesForBicycles\");\r",
													"    pm.expect(pm.response.json()[5].data[0].metrics[0].name).to.equal(\"gateEntriesForBicycles\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=summary&month={{queryParam.reportMonth}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "summary"
												},
												{
													"key": "month",
													"value": "{{queryParam.reportMonth}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}