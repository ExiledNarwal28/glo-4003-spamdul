{
	"info": {
		"_postman_id": "242065d7-ae74-4c8a-ac92-e80119073634",
		"name": "SPAMD-UL End-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdacd29b-4843-4839-abd2-371d170f2ec4",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9af21e5d-3864-4f6e-8ad2-c976299daff4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add access pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d4d49d4-856e-447e-ae44-eaef5cb4eea3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accessPassCode\", jsonData.accessPassCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"accessPasses"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Add user",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d2a3a1c-60f0-4cfb-a3f8-c1a7bb822e77",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d11d3fe-2cce-4fac-a53b-d206d8f9e2fc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Birth date",
									"item": [
										{
											"name": "Invalid birth date (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b453c8dd-9b22-436b-9cec-2f74137be3eb",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f69d5292-003b-4b74-9a70-f0cfb90913d0",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cf39e3c3-b42e-45f2-bc63-4a0393ee2d53",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d98b566b-cd2d-4c0f-8e33-eb7776ea662a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Sex",
									"item": [
										{
											"name": "Invalid sex (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e501562d-fd67-4342-9a96-6955fad22448",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e7cc596f-d9b3-4666-9256-1caf387e529f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06a857c7-b5b7-4993-bacc-8eeac529d239",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b12616b-9891-47e6-bcc0-b5b815ac9e4b",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns account id\", function () {",
													"    pm.response.to.have.jsonBody(\"accountId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user",
							"item": [
								{
									"name": "Non existent account id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd817cdd-73c4-48c8-af13-a4b6eb7bd3cc",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32053e34-e96a-4e70-b787-cb7db54e0aac",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name)",
													"});",
													"",
													"pm.test(\"Returns correct birth date\", function () {",
													"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
													"    pm.expect(birthDate).to.contain(pm.response.json().birthDate)",
													"});",
													"",
													"pm.test(\"Returns correct sex\", function () {",
													"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
													"    pm.expect(sex).to.contain(pm.response.json().sex)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d9fa3d7-1599-4a6f-872e-ffeef3194432",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get user's bills",
							"item": [
								{
									"name": "Non existent account id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d8cdb3f-30d4-40ea-a3e0-c24285a62c5b",
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd17ca4b-89d0-4421-82ba-4db83fdccc27",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pay user's bills (TODO)",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add car to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40f8fa67-c4a3-448c-9754-fa24e1a7728b",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Already existing license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7c26622e-d4b7-45d6-aca3-9e679e7258a6",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns already existing license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Already existing license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "997911ae-7915-4d0b-8257-dcd3acc5904c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0160566f-c298-43b0-87f2-6fcd274e5180",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a3b8d093-cb51-421c-8a66-98f0df01d4da",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Manufacturer",
									"item": [
										{
											"name": "Invalid manufacturer (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b30d97ec-4247-477c-bb1a-607c5ad630a3",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid manufacturer (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26a006be-4ebd-434b-89dc-9dad56678ac0",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Model",
									"item": [
										{
											"name": "Invalid model (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "80c857e4-6f4d-48da-91d5-e5f2b12e4f9a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid model (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e90605d6-640e-4836-bdf7-c3bc0b135fb5",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1a57f91e-c8d5-446c-b6a3-56dfc89baf44",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d6b20909-4004-407f-baa9-5cf558e41dcc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8b8192d6-6c00-4aff-9251-edb45e48eb3f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Consumption type",
									"item": [
										{
											"name": "Invalid consumption type (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e606a41-71ba-47d3-9d5d-649b38d6de01",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52e21f06-d44f-4083-a235-df7b7e69d838",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "937f9277-c12a-4dad-a72c-7bb165890a62",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid car",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "801e8a55-f0eb-43ed-b2a0-01b2b8d65919",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add access pass to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "119b63a5-65c3-4e75-a8b2-9f656c209b66",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Access day",
									"item": [
										{
											"name": "Invalid access day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eb427d20-80fc-4909-8111-75301117fe61",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": null,\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "029ae4ea-4d11-4820-972c-538fdd8c819d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a83c6c6-5b75-46de-b662-ee8e5007a64a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": \"funday\",\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4db80508-a9b9-45b7-96ca-c80a910377f7",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns license plate not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"License plate not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": \"AAA AAA\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid access pass",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7059676d-95c2-48ca-b4c4-6214d4864383",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add parking sticker to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "13b63a43-07c0-4f60-8144-0687a21572fb",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05f3a207-e5ed-4f82-9ac9-cc49e86ca197",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": \"Zone_Unknown\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd572891-a9ec-4b99-8d0c-02cc9aa3d2ef",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": null,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fb1ae96-a42f-4396-8e2f-081c353228b1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reception method",
									"item": [
										{
											"name": "Invalid reception method (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b625351c-fc3b-4abb-af11-fb2222c9289c",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": null,\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d271ba71-46c6-41e1-82ae-976c4793ebf8",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a7cea18e-d917-4334-b326-f36379dc3a01",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"byFoot\",\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Postal code",
									"item": [
										{
											"name": "Missing postal code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eab485d2-938a-449c-8a14-09a32e50e017",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing postal code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "593628d1-8034-4407-a19b-b88c446125cc",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid postal code (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9afa0552-ab06-41fd-9a00-0bb770281f87",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": \"badFormat\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Email",
									"item": [
										{
											"name": "Missing email (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "784df2d0-dc07-4554-b6c9-b7d465287dbe",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing email (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "312ad12e-651f-4f48-9497-d4565c3e7512",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid email (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b281fbd-cd32-45d3-a134-f48e637d00c2",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid email address\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": \"badFormat\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid parking sticker (postal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41e1f17d-42cd-49e2-9a64-01695e4304e3",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f17b346-5ba1-4b2e-9289-33941d6b01e3",
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {{request.parkingSticker.email}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Gate entry",
					"item": [
						{
							"name": "Validate gate entry for access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9219e1d9-721f-4b39-8cde-47cda781be17",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": {{request.accessPass.accessDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Day of week",
									"item": [
										{
											"name": "Invalid day of week (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f3779a7-99e3-4405-9694-d2bc0241142d",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid day of week (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10739c39-7b87-40e2-9d5e-afa226d6cb76",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid day of week (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b975a3b8-facf-46f4-be5a-255067cdb3e1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dayOfWeek\": \"funday\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gateEntry",
														"validateAccessPass",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid access day",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "620ca059-0912-4a1e-8924-2af4fd722f1f",
												"exec": [
													"pm.test(\"Returns status 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Returns access status granted\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access granted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dayOfWeek\": {{request.accessPass.accessDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gateEntry",
												"validateAccessPass",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid access day",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2313ff73-8233-44a2-a3e4-85c70559f5c3",
												"exec": [
													"pm.test(\"Returns status 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Returns access status granted\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.equal(\"Access refused\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dayOfWeek\": \"friday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gateEntry/validateAccessPass/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gateEntry",
												"validateAccessPass",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offenses",
					"item": [
						{
							"name": "Get offense types",
							"item": [
								{
									"name": "Get offense types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b7cdb02-6b40-4d43-901c-6409051bffd7",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns offenses\", function () {",
													"    pm.expect(pm.response.json()).to.length.to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns offence with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offence with code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offence with amount\", function () {",
													"    pm.expect(pm.response.json()[0].amount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/types",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Validation offense for parking sticker",
							"item": [
								{
									"name": "Parking sticker code",
									"item": [
										{
											"name": "Invalid parking sticker code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "96d96d8e-648f-49b2-9a22-a5f1296fe96a",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": null,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking sticker code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cd139a0a-aa0e-4090-8223-02fc37abe4ac",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6892f88c-26e1-49a4-80d2-70dff3657bfd",
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ea644e9-ed05-4a9a-86b6-2d1ad50e771f",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": null,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "08a8e01f-a606-4032-9df5-9e9cdb7611f4",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Time of day",
									"item": [
										{
											"name": "Invalid time of day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c1d55a83-d9cd-42b6-bc6e-590d2e0e6ef1",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "64a4ea17-9f56-464e-804f-294caba6358b",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45e490e6-3c9c-4cfd-8c91-eaf40017c813",
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": \"120000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Valid offense validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "573329a3-7a2a-45d4-a4f4-1bcc0aef1161",
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}